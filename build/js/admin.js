var c=(h,t,e)=>new Promise((r,s)=>{var a=n=>{try{o(e.next(n))}catch(d){s(d)}},i=n=>{try{o(e.throw(n))}catch(d){s(d)}},o=n=>n.done?r(n.value):Promise.resolve(n.value).then(a,i);o((e=e.apply(h,t)).next())});import l from"./externalServices.js";import"./utils.js";class m{constructor(t){this.parentElement=t,this.token=null,this.services=new l}login(t){return c(this,null,function*(){try{this.token=yield this.services.loginRequest(t),this.next()}catch(e){alert(e.message.message)}})}next(){return c(this,null,function*(){const t=yield this.services.fetchOrders(this.token.accessToken);this.showOrders(t)})}showLogin(){const t=document.querySelector("#login-template"),e=t.content.cloneNode(!0);this.parentElement.appendChild(e);const r=document.querySelector("#login-form");r.addEventListener("submit",s=>{s.preventDefault();const a=new FormData(s.target),i={};for(let o of a.keys())i[o]=a.get(o);this.login(i)})}showOrders(t){this.parentElement.innerHTML=this.orderHtml();const e=document.querySelector("#orders tbody");e.innerHTML=t.map(r=>`<tr><td>${r.id}</td><td>${new Date(r.orderDate).toLocaleDateString("en-US")}</td>${this.orderItems(r.items)}<td>${r.orderTotal}</td></tr>`).join(""),this.parentElement.innerHTML+=e}orderItems(t){const e=[];if(Array.isArray(t)){for(let r=0;r<t.length;r++)e.push(`<li>${t[r].name} <span> Quantity: ${t[r].quantity}</span></li>`);return`<td>${e.join("")}</td>`}else return`<td>${e.join("")}</td>`}orderHtml(){return`<h2>Current Orders</h2>
  <table id="orders">
  <thead>
  <tr><th>Id</th><th>Date</th><th>#Items</th><th>Total</th>
  </thead>
  <tbody class="order-body"></tbody>
  </table>
  `}}const u=document.querySelector(".admin-container"),p=new m(u);p.showLogin();
